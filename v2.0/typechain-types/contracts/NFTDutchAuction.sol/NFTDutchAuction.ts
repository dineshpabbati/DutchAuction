/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface NFTDutchAuctionInterface extends utils.Interface {
  functions: {
    "auctionStatusOpen()": FunctionFragment;
    "buyer()": FunctionFragment;
    "getBlockDifference()": FunctionFragment;
    "getCurrentBlock()": FunctionFragment;
    "getCurrentPrice()": FunctionFragment;
    "initBlock()": FunctionFragment;
    "initialPrice()": FunctionFragment;
    "isAuctionOpen()": FunctionFragment;
    "nftAddress()": FunctionFragment;
    "nftId()": FunctionFragment;
    "numBlocksAuctionOpen()": FunctionFragment;
    "offerPriceDecrement()": FunctionFragment;
    "placeBid()": FunctionFragment;
    "reservePrice()": FunctionFragment;
    "seller()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionStatusOpen"
      | "buyer"
      | "getBlockDifference"
      | "getCurrentBlock"
      | "getCurrentPrice"
      | "initBlock"
      | "initialPrice"
      | "isAuctionOpen"
      | "nftAddress"
      | "nftId"
      | "numBlocksAuctionOpen"
      | "offerPriceDecrement"
      | "placeBid"
      | "reservePrice"
      | "seller"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionStatusOpen",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBlockDifference",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuctionOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numBlocksAuctionOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offerPriceDecrement",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "placeBid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seller", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "auctionStatusOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockDifference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuctionOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numBlocksAuctionOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerPriceDecrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seller", data: BytesLike): Result;

  events: {};
}

export interface NFTDutchAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTDutchAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionStatusOpen(overrides?: CallOverrides): Promise<[boolean]>;

    buyer(overrides?: CallOverrides): Promise<[string]>;

    getBlockDifference(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    initBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    isAuctionOpen(overrides?: CallOverrides): Promise<[boolean]>;

    nftAddress(overrides?: CallOverrides): Promise<[string]>;

    nftId(overrides?: CallOverrides): Promise<[BigNumber]>;

    numBlocksAuctionOpen(overrides?: CallOverrides): Promise<[BigNumber]>;

    offerPriceDecrement(overrides?: CallOverrides): Promise<[BigNumber]>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    seller(overrides?: CallOverrides): Promise<[string]>;
  };

  auctionStatusOpen(overrides?: CallOverrides): Promise<boolean>;

  buyer(overrides?: CallOverrides): Promise<string>;

  getBlockDifference(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

  initBlock(overrides?: CallOverrides): Promise<BigNumber>;

  initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

  isAuctionOpen(overrides?: CallOverrides): Promise<boolean>;

  nftAddress(overrides?: CallOverrides): Promise<string>;

  nftId(overrides?: CallOverrides): Promise<BigNumber>;

  numBlocksAuctionOpen(overrides?: CallOverrides): Promise<BigNumber>;

  offerPriceDecrement(overrides?: CallOverrides): Promise<BigNumber>;

  placeBid(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

  seller(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    auctionStatusOpen(overrides?: CallOverrides): Promise<boolean>;

    buyer(overrides?: CallOverrides): Promise<string>;

    getBlockDifference(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initBlock(overrides?: CallOverrides): Promise<BigNumber>;

    initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isAuctionOpen(overrides?: CallOverrides): Promise<boolean>;

    nftAddress(overrides?: CallOverrides): Promise<string>;

    nftId(overrides?: CallOverrides): Promise<BigNumber>;

    numBlocksAuctionOpen(overrides?: CallOverrides): Promise<BigNumber>;

    offerPriceDecrement(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(overrides?: CallOverrides): Promise<void>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    seller(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    auctionStatusOpen(overrides?: CallOverrides): Promise<BigNumber>;

    buyer(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockDifference(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(overrides?: CallOverrides): Promise<BigNumber>;

    initBlock(overrides?: CallOverrides): Promise<BigNumber>;

    initialPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isAuctionOpen(overrides?: CallOverrides): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nftId(overrides?: CallOverrides): Promise<BigNumber>;

    numBlocksAuctionOpen(overrides?: CallOverrides): Promise<BigNumber>;

    offerPriceDecrement(overrides?: CallOverrides): Promise<BigNumber>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    seller(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionStatusOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockDifference(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAuctionOpen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numBlocksAuctionOpen(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerPriceDecrement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    seller(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
